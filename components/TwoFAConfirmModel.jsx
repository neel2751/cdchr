"use client";
import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSlot,
} from "@/components/ui/input-otp";
import { REGEXP_ONLY_DIGITS } from "input-otp";
import { verify2FAWithDB } from "@/server/2FAServer/TwoAuthserver";
import { toast } from "sonner";

export default function TwoFAConfirmModal({ open, onClose, onSuccess }) {
  const [code, setCode] = useState("");
  const [loading, setLoading] = useState(false);

  const onComplete = async () => {
    if (code.length < 6) {
      toast.error("Please enter a valid 6-digit code");
      return;
    }
    await handleConfirm();
  };

  const handleConfirm = async () => {
    setLoading(true);
    const valid = await verify2FAWithDB(code);
    if (valid?.success) {
      onSuccess();
      setCode("");
    } else {
      toast.error("Invalid 2FA code");
    }
    setLoading(false);
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className={"lg:max-w-sm"}>
        <DialogHeader>
          <DialogTitle>Enter your 2FA code</DialogTitle>
          <DialogDescription>
            Please enter the 6-digit verification code generated by your
            authenticator app to confirm your action.
          </DialogDescription>
        </DialogHeader>
        {loading && (
          <div className="flex items-center justify-center mt-4">
            <p>Loading...</p>
          </div>
        )}
        <div className="mt-4">
          <Label htmlFor="code-input-0" className="sr-only">
            Enter verification code
          </Label>
          <div className="flex gap-2">
            <InputOTP
              maxLength={6}
              pattern={REGEXP_ONLY_DIGITS}
              name="code"
              value={code}
              onChange={(value) => setCode(value)}
              onComplete={onComplete}
            >
              {Array.from({ length: 6 }).map((_, index) => (
                <InputOTPGroup key={index}>
                  <InputOTPSlot index={index} />
                </InputOTPGroup>
              ))}
            </InputOTP>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
